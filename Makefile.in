##########################################################################
#                                                                        #
#  Copyright (C) Johannes Kanig, Stephane Lescuyer                       #
#  and Jean-Christophe Filliatre                                         #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU Library General Public           #
#  License version 2, with the special exception on linking              #
#  described in file LICENSE.                                            #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
##########################################################################

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@

# where to install the man page
MANDIR=@mandir@

# other variables set by ./configure
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@
OCAMLWEB = @OCAMLWEB@
OCAMLWIN32 = @OCAMLWIN32@
EXE = @EXE@
LIBEXT = @LIBEXT@
OBJEXT = @OBJEXT@

BFLAGS = -dtypes -g $(INCLUDES) 
OFLAGS = -dtypes $(INCLUDES) @FORPACK@

# main target
#############

NAME = mlpost

all: byte $(OCAMLBEST) handbookgraphs.cmx othergraphs.cmx tests.cmx

# bytecode and native-code compilation
######################################

CMO := misc.cmo num.cmo name.cmo point.cmo transform.cmo \
       color.cmo picture.cmo box.cmo dash.cmo \
       path.cmo simplePoint.cmo simplePath.cmo pen.cmo command.cmo \
       helpers.cmo diag.cmo tree.cmo convenience.cmo generate.cmo
CMX := $(CMO:.cmo=.cmx)

CMA := mlpost.cma
CMXA := mlpost.cmxa

HANDBOOKCMO := handbookgraphs.cmo
OTHERCMO := othergraphs.cmo
TESTSCMO := tests.cmo
HANDBOOKCMX := $(HANDBOOKCMO:.cmo=.cmx)
OTHERCMX := $(OTHERCMO:.cmo=.cmx)

$(HANDBOOKCMX) $(OTHERCMX): $(CMXA)

GENERATED = version.ml

byte: $(CMA)
opt: $(CMXA)

$(CMA): mlpost.cmo
	$(OCAMLC) -a $(BFLAGS) -o $@ $^

$(CMXA): mlpost.cmx
	$(OCAMLOPT) -a $(OFLAGS) -o $@ $^

mlpost.cmo: $(CMO)
	$(OCAMLC) $(INCLUDES) -pack -o $@ $^

mlpost.cmx: $(CMX)
	$(OCAMLOPT) $(INCLUDES) -pack -o $@ $^

tests: $(CMA) tests.ml
	ocaml $(CMA) tests.ml
	make -C test tests
	gv test/tests.ps
handbook: $(CMA) handbookgraphs.ml
	ocaml $(CMA) handbookgraphs.ml
	make -C test manual
	make -C test/manual mpost
	gv test/testmanual.ps

other: $(CMA) othergraphs.ml
	ocaml $(CMA) othergraphs.ml
	make -C test other
	make -C test/othergraphs mpost
	gv test/othergraphs.ps

VERSION=0.1

version.ml: Makefile
	echo "let version = \""$(VERSION)"\"" > version.ml
	echo "let date = \""`date`"\"" >> version.ml

dep:
	$(OCAMLDEP) *.mli *.ml | ocamldot | dot -Tps | gv -

# headers
#########

headers:
	headache -c headache_config.txt -h header.txt \
		Makefile.in configure.in README.txt *.mli *.ml

# installation
##############

install-indep: 
	mkdir -p $(BINDIR)
	mkdir -p $(MANDIR)/man1
	cp -f $(NAME).1 $(MANDIR)/man1

install: install-$(OCAMLBEST) install-byte

install-byte: 
	cp -f mlpost.cmo mlpost.cmi $(CMA) "$(OCAMLLIB)"

install-opt: 
	cp -f mlpost$(LIBEXT) mlpost.cmx $(CMXA) "$(OCAMLLIB)"

# documentation
###############

DOCFILES=manual.ps manual.html

doc: $(DOCFILES)

# export
########

EXPORTDIR=$(NAME)-$(VERSION)
TAR=$(EXPORTDIR).tar

FTP = $$HOME/ftp/$(NAME)
WWW = $$HOME/WWW/$(NAME)

FILES = *.ml *.mli \
	Makefile.in configure configure.in   \
	.depend README INSTALL COPYING GPL CHANGES

export: source binary export-doc
	cp README COPYING GPL CHANGES $(FTP)

source: 
	mkdir -p export/$(EXPORTDIR)
	cp $(FILES) export/$(EXPORTDIR)
	cd export ; tar cf $(TAR) $(EXPORTDIR) ; gzip -f --best $(TAR)
	cp export/$(TAR).gz $(FTP)

export-doc: $(DOCFILES)
	gzip -c manual.ps > $(FTP)/manual.ps.gz
	cp manual.html $(WWW)

BINARY = $(EXPORTDIR)-$(OSTYPE)
BINARYTAR=$(BINARY).tar

BINARYFILES = README INSTALL COPYING GPL $(NAME).1

binary: $(NAME).$(OCAMLBEST) $(DOCFILES)
	mkdir -p export/$(BINARY)
	cp $(BINARYFILES) $(DOCFILES) export/$(BINARY)
	cp $(NAME).$(OCAMLBEST) export/$(BINARY)/$(NAME)
	(cd export; tar czf $(BINARY).tar.gz $(BINARY))
	cp export/$(BINARY).tar.gz $(FTP)

# literate programming
######################

SOURCES = 

$(NAME).tex: $(SOURCES)
	$(OCAMLWEB) -o $@ $^

# generic rules
###############

include Makefile.rules
# Emacs tags
############

tags:
	find . -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

# Makefile is rebuilt whenever Makefile.in or configure.in is modified
######################################################################

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean
#######

clean::
	rm -f *.cm[iox] *.o *~ *.annot
	rm -f $(GENERATED) parser.output
	rm -f $(NAME).cma $(NAME).cmxa $(NAME).a
	rm -f *.aux *.log $(NAME).tex $(NAME).dvi $(NAME).ps
	make -C test clean
	rm -f *.opt test.dvi test.ps

dist-clean distclean:: clean
	rm -f Makefile config.cache config.log config.status

# depend
########

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) *.ml *.mli > .depend

include .depend
