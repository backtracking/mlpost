##########################################################################
#                                                                        #
#  Copyright (C) Johannes Kanig, Stephane Lescuyer                       #
#  and Jean-Christophe Filliatre                                         #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU Library General Public           #
#  License version 2.1, with the special exception on linking            #
#  described in file LICENSE.                                            #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
##########################################################################

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@

# where to install the man page
MANDIR=@mandir@

# other variables set by ./configure
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@
OCAMLWEB = @OCAMLWEB@
OCAMLWIN32 = @OCAMLWIN32@
EXE = @EXE@
LIBEXT = @LIBEXT@
OBJEXT = @OBJEXT@

BFLAGS = -dtypes -g $(INCLUDES) 
OFLAGS = -dtypes $(INCLUDES) @FORPACK@

# main target
#############

NAME = mlpost
VERSION=0.3

TESTS = handbookgraphs.cmx othergraphs.cmx tests.cmx
TOOL = tool.$(OCAMLBEST)

all: byte $(OCAMLBEST) $(TOOL)

check: byte $(OCAMLBEST) $(TOOL) $(TESTS) check-examples

# bytecode and native-code compilation
######################################

CMO := misc.cmo name.cmo compiled_types.cmo print.cmo compile.cmo num.cmo point.cmo \
       transform.cmo color.cmo primPath.cmo path.cmo picture.cmo \
       dash.cmo pen.cmo command.cmo shapes.cmo pos.cmo arrow.cmo box.cmo\
       metapost.cmo helpers.cmo diag.cmo tree.cmo plot.cmo generate.cmo
CMX := $(CMO:.cmo=.cmx)

CMA := mlpost.cma
CMXA := mlpost.cmxa

HANDBOOKCMO := handbookgraphs.cmo
OTHERCMO := othergraphs.cmo
TESTSCMO := tests.cmo
HANDBOOKCMX := $(HANDBOOKCMO:.cmo=.cmx)
OTHERCMX := $(OTHERCMO:.cmo=.cmx)

$(HANDBOOKCMX) $(OTHERCMX): $(CMXA)

GENERATED = version.ml tool.ml

byte: $(CMA)
opt: $(CMXA)

$(CMA): mlpost.cmo
	$(OCAMLC) -a $(BFLAGS) -o $@ $^

$(CMXA): mlpost.cmx
	$(OCAMLOPT) -a $(OFLAGS) -o $@ $^

mlpost.cmo: mlpost.cmi
mlpost.cmo: $(CMO)
	$(OCAMLC) $(INCLUDES) -pack -o $@ $(CMO)

mlpost.cmx: mlpost.cmi
mlpost.cmx: $(CMX)
	$(OCAMLOPT) $(INCLUDES) -pack -o $@ $(CMX)

TOOLCMO=tool.cmo
TOOLCMX := $(TOOLCMO:.cmo=.cmx)

tool.byte: $(TOOLCMO)
	$(OCAMLC) -o $@ unix.cma $^

tool.opt: $(TOOLCMX)
	$(OCAMLOPT) -o $@ unix.cmxa $^

tests: $(CMA) tests.ml
	ocaml $(CMA) tests.ml
	make -C test tests
	gv test/tests.ps

handbook: $(CMA) handbookgraphs.ml
	ocaml $(CMA) handbookgraphs.ml
	make -C test manual
	make -C test/manual mpost
	gv test/testmanual.ps

other: $(CMA) othergraphs.ml
	ocaml $(CMA) othergraphs.ml
	make -C test other
	make -C test/othergraphs mpost
	gv test/othergraphs.ps

.PHONY: check-examples
check-examples: mlpost.cma
	for f in examples/*.ml; do ocamlc -c $$f; done

version.ml: Makefile
	echo "let version = \""$(VERSION)"\"" > version.ml
	echo "let date = \""`date`"\"" >> version.ml

dep:
	$(OCAMLDEP) *.mli *.ml | ocamldot | dot -Tps | gv -

# headers
#########

headers:
	headache -c headache_config.txt -h header.txt \
		Makefile.in configure.in README.txt *.mli *.ml *.mll

# installation
##############

install: install-$(OCAMLBEST) 

install-byte: $(CMA) tool.byte
	cp -f mlpost.cmo mlpost.cmi $(CMA) "$(OCAMLLIB)"
	mkdir -p $(BINDIR)
	cp -f tool.byte $(BINDIR)/mlpost

install-opt: $(CMXA) tool.opt
	cp -f mlpost.cmo mlpost.cmi $(CMA) "$(OCAMLLIB)"
	cp -f mlpost$(LIBEXT) mlpost.cmx $(CMXA) "$(OCAMLLIB)"
	mkdir -p $(BINDIR)
	cp -f tool.opt $(BINDIR)/mlpost

# export
########

EXPORTDIR=$(NAME)-$(VERSION)
TAR=$(EXPORTDIR).tar

WWW = /users/www-perso/projets/mlpost
FTP = $(WWW)/download

FILES = *.ml *.mli *.mll \
	Makefile.in configure configure.in .depend \
	.depend README.txt INSTALL LICENSE CHANGES FAQ
EXFILES = examples/Makefile examples/*.ml examples/all.template

export: source export-www export-examples export-doc
	cp README.txt INSTALL LICENSE CHANGES $(FTP)

source: 
	mkdir -p export/$(EXPORTDIR)
	cp $(FILES) export/$(EXPORTDIR)
	mkdir -p export/$(EXPORTDIR)/examples
	cp $(EXFILES) export/$(EXPORTDIR)/examples
	cd export ; tar cf $(TAR) $(EXPORTDIR) ; gzip -f --best $(TAR)
	cp export/$(TAR).gz $(FTP)

DOCFILES:=$(shell echo *.mli)
DOCFILES:=$(filter-out types.mli, $(DOCFILES))

.PHONY: doc
doc: mlpost.mli
	mkdir -p doc
	ocamldoc -html -hide Mlpost -d doc mlpost.mli

export-doc:
	ocamldoc -html -hide Mlpost -d $(WWW)/doc mlpost.mli

export-www: www/version.prehtml
	make -C www

www/version.prehtml: Makefile
	echo "<#def version>$(VERSION)</#def>" > www/version.prehtml

export-examples: 
	make -C examples
	cp -f --parents examples/*.png examples/*.html $(WWW)

# literate programming
######################

SOURCES = 

$(NAME).tex: $(SOURCES)
	$(OCAMLWEB) -o $@ $^

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .tex .dvi .ps .html

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

.tex.dvi:
	latex $< && latex $<

.dvi.ps:
	dvips $< -o $@ 

.tex.html:
	hevea $<


# Emacs tags
############

tags:
	find . -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

.PHONY: ocamlwizard
ocamlwizard:
	ocamlrun -bt ocamlwizard compile types.mli $(CMO:.cmo=.ml) mlpost.mli

# Makefile is rebuilt whenever Makefile.in or configure.in is modified
######################################################################

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean
#######

clean::
	rm -f *.cm[iox] *.o *~ *.annot
	rm -f $(GENERATED) parser.output
	rm -f $(NAME).cma $(NAME).cmxa $(NAME).a
	rm -f *.aux *.log $(NAME).tex $(NAME).dvi $(NAME).ps
	make -C test clean
	make -C www clean
	rm -f *.opt test.dvi test.ps

dist-clean distclean:: clean
	rm -f Makefile config.cache config.log config.status

# depend
########

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) *.ml *.mli > .depend

include .depend
