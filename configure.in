##########################################################################
#                                                                        #
#  Copyright (C) Johannes Kanig, Stephane Lescuyer                       #
#  and Jean-Christophe Filliatre                                         #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU Library General Public           #
#  License version 2.1, with the special exception on linking            #
#  described in file LICENSE.                                            #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
##########################################################################

# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found, 
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex" (or "ocamllex.opt" if present)
#   OCAMLYACC     "ocamlyac"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number
#   OCAMLWEB      "ocamlweb" (not mandatory)
#   OCAMLWIN32    "yes"/"no" depending on Sys.os_type = "Win32"
#   EXE           ".exe" if OCAMLWIN32=yes, "" otherwise

# check for one particular file of the sources 
# ADAPT THE FOLLOWING LINE TO YOUR SOURCES!
AC_INIT(mlpost.mli)

# The Version of Mlpost
MLPOSTVERSION="0.7"

# The compilation date
TODAY=`date`

# Check for Ocaml compilers

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number and library path
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
echo "ocaml version is $OCAMLVERSION"
OCAMLLIB=`$OCAMLC -v | tail -1 | cut -f 4 -d " "`
if test "$OCAMLLIB" != ${OCAMLLIB#/usr} -a \
        -d /usr/local${OCAMLLIB#/usr}; then
   OCAMLLIBLOCAL=/usr/local${OCAMLLIB#/usr}
   echo "ocaml library path is $OCAMLLIB and $OCAMLLIBLOCAL"
else
        echo "ocaml library path is $OCAMLLIB"
fi


if test "$LIBDIR" = ""; then
        LIBDIR=$OCAMLLIB/mlpost
fi
echo "Mlpost library will be installed in: $LIBDIR"

#Set FORPACK and abort if ocaml version is < 3.08
case $OCAMLVERSION in
  0.*|1.*|2.*|3.00*|3.01*|3.02*|3.03*|3.04*|3.05*|3.06*|3.07*)
        AC_MSG_ERROR(mlpost needs ocaml version 3.08.0 or higher);;
  3.08*)
	FORPACK="";;
  *)
	FORPACK="-for-pack Mlpost";;
esac

#Set basic OFLAGS - lower than 3.10 doesn't have -g for ocamlopt
case $OCAMLVERSION in
  0.*|1.*|2.*|3.00*|3.01*|3.02*|3.03*|3.04*|3.05*|3.06*|3.07*|3.08*|3.09*)
       BASICOFLAGS="";;
  *)
       BASICOFLAGS="-g";;
esac
# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
	AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
	    OCAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLC=$OCAMLCDOTOPT
	fi
fi

# checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVER" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLOPT=$OCAMLOPTDOTOPT
	fi
    fi
fi

# ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(Cannot find ocamldep.)
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
    AC_MSG_ERROR(Cannot find ocamllex.)
else
    AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
    if test "$OCAMLLEXDOTOPT" != no ; then
	OCAMLLEX=$OCAMLLEXDOTOPT
    fi
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

AC_CHECK_PROG(OCAMLWEB,ocamlweb,ocamlweb,true)

# platform
AC_MSG_CHECKING(platform)
if echo "let _ = Sys.os_type" | ocaml | grep -q Win32; then
    AC_MSG_RESULT(Win32)
    OCAMLWIN32=yes
    EXE=.exe
    LIBEXT=.lib
    OBJEXT=.obj
else
    AC_MSG_RESULT(not Win32)
    OCAMLWIN32=no
    EXE=
    LIBEXT=.a
    OBJEXT=.o
fi


## Where are the library we need
# we look for ocamlfind; if not present, we just not use it to find
# the library
AC_CHECK_PROG(OCAMLFIND,ocamlfind,yes,no)

if test "$OCAMLFIND" == "yes"; then
   OCAMLFINDLIB=$(ocamlfind printconf stdlib)
   if test "$OCAMLFINDLIB" != "$OCAMLLIB"; then
   OCAMLFIND=no;
   echo "but your ocamlfind is not compatible with your ocamlc:"
   echo "ocamlfind : $OCAMLFINDLIB, ocamlc : $OCAMLLIB"
   fi
fi

case $OCAMLVERSION in
  3.08|3.09*)
        echo "Your ocaml is too old. I can't compile the backend cairo without ocamlbuild"
        MAKEFILE=simple.Makefile;;
  *)
        OCAMLBUILD=yes
        echo "ocamlbuild ok"
        MAKEFILE=ocamlbuild.Makefile;;
esac

# checking for mlcairo
if test "$OCAMLFIND" == yes; then
   CAIROLIB=$(ocamlfind query cairo)
fi

if test -n "$CAIROLIB";then
   echo "ocamlfind found cairo in $CAIROLIB"
else
    AC_CHECK_FILE($OCAMLLIB/cairo/cairo.cma,CAIRO=yes,CAIRO=no)
    if test "$CAIRO" = yes; then
       CAIROLIB=$OCAMLLIB/cairo/
    elif test -n "$OCAMLLIBLOCAL"; then
       AC_CHECK_FILE($OCAMLLIBLOCAL/cairo/cairo.cma,CAIRO=yes,CAIRO=no)
       if test "$CAIRO" = yes; then
       CAIROLIB=$OCAMLLIBLOCAL/cairo/
       fi
    fi
fi

if test "$OCAMLFIND" == yes; then
   BITSTRINGLIB=$(ocamlfind query bitstring)
fi

if test -n "$BITSTRINGLIB";then
   echo "ocamlfind found bitstring in $BITSTRINGLIB"
else
    AC_CHECK_FILE($OCAMLLIB/bitstring/bitstring.cma,BITSTRING=yes,BITSTRING=no)
    if test "$BITSTRING" = yes; then
       BITSTRINGLIB=$OCAMLLIB/bitstring/
    elif test -n "$OCAMLLIBLOCAL"; then
       AC_CHECK_FILE($OCAMLLIBLOCAL/bitstring/bitstring.cma,BITSTRING=yes,BITSTRING=no)
       if test "$BITSTRING" = yes; then
       BITSTRINGLIB=$OCAMLLIBLOCAL/bitstring/
       fi
    fi
fi

if test -n "$OCAMLBUILD" -a -n "$CAIROLIB" -a -n "$BITSTRINGLIB"; then
   CAIRO=yes
   INCLUDECAIRO="-I $CAIROLIB -I $BITSTRINGLIB"
else
   CAIRO=no
   INCLUDECAIRO=""
fi

#TEMPORAIRE
#CAIRO=no
#INCLUDECAIRO=""

# checking for lablgtk2
if test "$OCAMLFIND" == yes; then
   LABLGTK2LIB=$(ocamlfind query lablgtk2)
fi

if test -n "$LABLGTK2LIB";then
   echo "ocamlfind found lablgtk2 in $LABLGTK2LIB"
else
    AC_CHECK_FILE($OCAMLLIB/lablgtk2/lablgtk.cma,LABLGTK2=yes,LABLGTK2=no)
    if test "$LABLGTK2" = yes; then
       LABLGTK2LIB=$OCAMLLIB/lablgtk2/
    elif test -n "$OCAMLLIBLOCAL"; then
       AC_CHECK_FILE($OCAMLLIBLOCAL/lablgtk2/lablgtk2.cma,LABLGTK2=yes,LABLGTK2=no)
       if test "$LABLGTK2" = yes; then
       LABLGTK2LIB=$OCAMLLIBLOCAL/lablgtk2/
       fi
    fi
fi

##AC_CHECK_FILE($OCAMLLIB/lablgtk2/lablgtk.cma,LABLGTK2=yes,LABLGTK2=no)
## AC_CHECK_PROG(LABLGTK2,lablgtk2,yes,no) not always available (Win32)
if test -n "$LABLGTK2LIB" ; then
   LABLGTK2=yes
dnl    INCLUDEGTK2="-I $LABLGTK2LIB"
   INCLUDEGTK2="-I +lablgtk2"
else
   LABLGTK2=no
fi


#Viewer for ps and pdf
AC_CHECK_PROGS(PSVIEWER,gv evince)
AC_CHECK_PROGS(PDFVIEWER,xpdf acroread evince)

# substitutions to perform
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(FORPACK)
AC_SUBST(BASICOFLAGS)
#(not used) AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLWEB)
AC_SUBST(OCAMLBUILD)
AC_SUBST(LABLGTK2)
AC_SUBST(INCLUDEGTK2)
AC_SUBST(LABLGTK2LIB)
AC_SUBST(CAIRO)
AC_SUBST(CAIROLIB)
AC_SUBST(INCLUDECAIRO)
AC_SUBST(BITSTRINGLIB)
AC_SUBST(OCAMLWIN32)
AC_SUBST(EXE)
AC_SUBST(LIBEXT)
AC_SUBST(OBJEXT)
AC_SUBST(LIBDIR)
AC_SUBST(MLPOSTVERSION)
AC_SUBST(TODAY)

echo "---------------------------------------------------"
echo -n "  native code compilation: "
if test "$OCAMLBEST" == "opt"; then echo "yes"; else echo "no"; fi
echo "  Cairo support          : "$CAIRO
echo "---------------------------------------------------"

# Finally create the Makefile from Makefile.in

AC_OUTPUT(META version.ml $MAKEFILE Makefile myocamlbuild.ml)
chmod a-w $MAKEFILE
chmod a-w Makefile
chmod a-w myocamlbuild.ml
chmod a-w META
chmod a-w version.ml
